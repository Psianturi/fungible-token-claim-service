# .github/workflows/sandbox-test.yml
name: Sandbox Integration (CI)

on:
  push:
  pull_request:

jobs:
  sandbox-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci --silent

      - name: Try to install neard binary from nearcore releases
        id: install_neard
        run: |
          set -euo pipefail
          VERSION="2.6.5"
          TRIES=( "neard-${VERSION}-x86_64-unknown-linux-gnu.tar.gz" "neard-v${VERSION}-x86_64-unknown-linux-gnu.tar.gz" )
          OK=0
          for name in "${TRIES[@]}"; do
            URL="https://github.com/near/nearcore/releases/download/${VERSION}/${name}"
            echo "Trying $URL ..."
            if curl -sSL --fail -o /tmp/neard.tar.gz "$URL"; then
              mkdir -p /tmp/neard_unpack
              tar -xzf /tmp/neard.tar.gz -C /tmp/neard_unpack
              if [ -f /tmp/neard_unpack/neard ]; then
                sudo mv /tmp/neard_unpack/neard /usr/local/bin/neard
                OK=1
                break
              fi
              # try nested location
              found=$(find /tmp/neard_unpack -type f -name neard | head -n1 || true)
              if [ -n "$found" ]; then
                sudo mv "$found" /usr/local/bin/neard
                OK=1
                break
              fi
            fi
          done
          if [ "$OK" -eq 1 ]; then
            sudo chmod +x /usr/local/bin/neard
            echo "neard installed"
            echo "installed=true" >> $GITHUB_OUTPUT
          else
            echo "neard not installed"
            echo "installed=false" >> $GITHUB_OUTPUT
          fi

      - name: Start neard sandbox (if installed)
        if: steps.install_neard.outputs.installed == 'true'
        run: |
          set -euo pipefail
          export NEAR_HOME="$HOME/.near"
          mkdir -p "$NEAR_HOME"
          # init if needed (non-fatal)
          neard --home "$NEAR_HOME" init --chain-id sandbox || true
          nohup neard --home "$NEAR_HOME" run > neard.log 2>&1 &
          # wait for jsonrpc
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "sandbox ready"
              break
            fi
            sleep 1
          done
          curl -sS http://127.0.0.1:3030/status || (echo "neard didn't start" && cat neard.log && exit 1)

      - name: Wait for NEAR Sandbox to be ready
        if: steps.install_neard.outputs.installed == 'true'
        run: |
          set -euo pipefail
          echo "‚è≥ Waiting for NEAR Sandbox to be fully ready..."

          # Wait for sandbox RPC to respond
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "‚úÖ Sandbox RPC is responding"
              break
            fi
            echo "‚è≥ Waiting for sandbox RPC... ($i/60)"
            sleep 2
          done

          if [ $i -eq 60 ]; then
            echo "‚ùå Sandbox RPC did not respond within 2 minutes"
            exit 1
          fi

      - name: Deploy FT contract to sandbox
        if: steps.install_neard.outputs.installed == 'true'
        run: |
          set -euo pipefail
          export NEAR_ENV=sandbox

          # Install near-cli for sandbox operations
          npm install -g near-cli

          # Wait a bit more for full initialization
          sleep 3

          echo "Creating FT contract account..."
          near create-account ft.test.near --masterAccount test.near --initialBalance 1000

          echo "Deploying FT contract..."
          near deploy ft.test.near ./helper/fungible_token.wasm --initFunction new_default_meta --initArgs '{"owner_id": "test.near", "total_supply": "1000000000000000000000000"}'

          echo "Creating user account..."
          near create-account user.test.near --masterAccount test.near --initialBalance 1000

          echo "Registering storage for test.near..."
          near call ft.test.near storage_deposit '{"account_id": "test.near", "registration_only": true}' --accountId test.near --depositYocto 1250000000000000000000

          echo "Registering storage for user.test.near..."
          near call ft.test.near storage_deposit '{"account_id": "user.test.near", "registration_only": true}' --accountId user.test.near --depositYocto 1250000000000000000000

          echo "Verifying contract deployment..."
          TOTAL_SUPPLY=$(near view ft.test.near ft_total_supply '{}' || echo "error")
          if [[ "$TOTAL_SUPPLY" == "error" ]]; then
            echo "‚ùå Contract deployment failed"
            exit 1
          fi
          echo "‚úÖ Contract deployed successfully. Total supply: $TOTAL_SUPPLY"

      - name: Fallback to run tests against testnet (if no sandbox)
        if: steps.install_neard.outputs.installed == 'false'
        run: |
          echo "neard not available in runner. We'll run integration steps against testnet as fallback."
          echo "NEAR_ENV=testnet" >> $GITHUB_ENV
          echo "FT_CONTRACT=posm.testnet" >> $GITHUB_ENV
          echo "MASTER_ACCOUNT=posm.testnet" >> $GITHUB_ENV

      - name: Run server (in background) and tests
        env:
          NEAR_ENV: ${{ env.NEAR_ENV || 'sandbox' }}
          NODE_URL: http://127.0.0.1:3030
          FT_CONTRACT: ${{ env.FT_CONTRACT || 'ft.test.near' }}
          MASTER_ACCOUNT: ${{ env.MASTER_ACCOUNT || 'test.near' }}
        run: |
          # start service with explicit environment
          if [ "${NEAR_ENV}" = "sandbox" ]; then
            npm run start:sandbox &> service.log &
          else
            npm start &> service.log &
          fi
          sleep 3

          # Wait for API to respond (up to 60s)
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "‚úÖ service up and responding"
              break
            fi
            echo "‚è≥ Waiting for service... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "‚ùå Service did not start within 1 minute"
            cat service.log
            exit 1
          fi

          # Run integration tests with retry
          echo "üß™ Running integration tests..."
          RECEIVER_ID="user.test.near"
          if [ "${NEAR_ENV}" != "sandbox" ]; then
            RECEIVER_ID="posma-badge.testnet"
          fi

          for attempt in {1..3}; do
            echo "Test attempt $attempt/3"

            # Test FT transfer
            RESPONSE=$(curl -s -X POST http://127.0.0.1:3000/send-ft \
              -H "Content-Type: application/json" \
              -d "{\"receiverId\": \"${RECEIVER_ID}\", \"amount\": \"1000000\", \"memo\": \"CI test\"}" || echo "connection_error")

            echo "API Response: $RESPONSE"

            # Check if transfer was successful
            if echo "$RESPONSE" | grep -q '"message"' && echo "$RESPONSE" | grep -q "FT transfer"; then
              echo "‚úÖ FT transfer test passed!"
              break
            else
              echo "‚ùå FT transfer test failed (attempt $attempt)"
              if [ $attempt -eq 3 ]; then
                echo "Final response: $RESPONSE"
                exit 1
              fi
              sleep 5
            fi
          done

          # Run Artillery benchmark
          echo "üéØ Running Artillery benchmark..."
          npx artillery run benchmark.yml --output benchmark-sandbox.json || true

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-logs
          path: |
            neard.log
            service.log
            benchmark-sandbox.json