# .github/workflows/sandbox-test.yml
name: Sandbox Integration (CI)

on:
  push:
  pull_request:

jobs:
  sandbox-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (respect updated package.json)
        run: |
          npm install --silent

      - name: Start NEAR sandbox
        run: |
          set -euo pipefail
          echo "🚀 Starting NEAR sandbox..."

          # Kill any existing sandbox processes
          pkill -f near-sandbox || true
          sleep 2

          # Clean up any leftover processes
          pkill -f neard || true
          sleep 1

          npx near-sandbox init || true
          nohup npx near-sandbox run > neard.log 2>&1 &
          SANDBOX_PID=$!

          # wait for jsonrpc
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "✅ NEAR sandbox ready"
              break
            fi
            echo "⏳ Waiting for sandbox... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "❌ Sandbox failed to start within 60 seconds"
            cat neard.log
            kill $SANDBOX_PID 2>/dev/null || true
            exit 1
          fi

          curl -sS http://127.0.0.1:3030/status || (echo "near-sandbox didn't start properly" && cat neard.log && kill $SANDBOX_PID 2>/dev/null || true && exit 1)

      - name: Extract sandbox validator key
        run: |
          set -euo pipefail
          echo "🔑 Extracting validator private key..."
          VALIDATOR_KEY_FILE="${HOME}/.near/validator_key.json"
          if [ -f "$VALIDATOR_KEY_FILE" ]; then
            SECRET_KEY=$(jq -r '.secret_key // .private_key' "$VALIDATOR_KEY_FILE")
            ACCOUNT_ID=$(jq -r '.account_id' "$VALIDATOR_KEY_FILE")
            echo "Found account: $ACCOUNT_ID"
            echo "Using key: ${SECRET_KEY:0:10}..."
            echo "MASTER_ACCOUNT_PRIVATE_KEY=$SECRET_KEY" >> $GITHUB_ENV
            echo "MASTER_ACCOUNT=$ACCOUNT_ID" >> $GITHUB_ENV
          else
            echo "❌ validator_key.json not found"
            exit 1
          fi
      - name: Deploy FT contract to sandbox
        run: |
          set -euo pipefail
          echo "🚀 Deploying FT contract to sandbox..."

          # For CI simplicity, deploy to master account instead of sub-account
          export NEAR_CONTRACT_ACCOUNT_ID="${MASTER_ACCOUNT}"
          export NEAR_SIGNER_ACCOUNT_ID="${MASTER_ACCOUNT}"
          export NEAR_SIGNER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}"
          export NEAR_NETWORK_CONNECTION="sandbox"

          echo "📦 Contract Account: ${NEAR_CONTRACT_ACCOUNT_ID}"
          echo "🔑 Signer Account: ${NEAR_SIGNER_ACCOUNT_ID}"

          # Run deployment script
          node ci/deploy-sandbox-rpc.mjs
          echo "✅ FT contract deployed successfully"

      - name: Create test accounts and setup storage
        run: |
          set -euo pipefail
          echo "👥 Creating test accounts and setting up storage..."

          # Set environment variables for test account setup
          export NEAR_CONTRACT_ACCOUNT_ID="${MASTER_ACCOUNT}"
          export NEAR_SIGNER_ACCOUNT_ID="${MASTER_ACCOUNT}"
          export NEAR_SIGNER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}"
          export NEAR_NETWORK_CONNECTION="sandbox"

          # Run the test account setup script
          USER_ACCOUNT_ID=$(node ci/setup-test-accounts.mjs | grep "USER_ACCOUNT_ID=" | cut -d'=' -f2)

          if [ -z "$USER_ACCOUNT_ID" ]; then
            echo "❌ Failed to create test user account"
            exit 1
          fi

          echo "USER_ACCOUNT_ID=$USER_ACCOUNT_ID" >> $GITHUB_ENV
          echo "✅ Test accounts setup complete - User account: $USER_ACCOUNT_ID"

      - name: Run API service and integration tests
        run: |
          set -euo pipefail
          echo "🚀 Starting API service for integration testing..."

          # Start the API service in background
          NEAR_ENV=sandbox \
          NODE_URL=http://127.0.0.1:3030 \
          FT_CONTRACT="${MASTER_ACCOUNT}" \
          MASTER_ACCOUNT="${MASTER_ACCOUNT}" \
          MASTER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}" \
          SKIP_STORAGE_CHECK=true \
          npm run start:sandbox &> service.log &
          SERVICE_PID=$!

          # Wait for service to be ready
          echo "⏳ Waiting for API service to start..."
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "✅ API service is responding"
              break
            fi
            echo "⏳ Waiting for service... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "❌ API service did not start within 1 minute"
            cat service.log
            kill $SERVICE_PID 2>/dev/null || true
            exit 1
          fi

          echo "🧪 Running send-ft integration tests..."

          # Test 1: Single transfer
          echo "Test 1: Single FT transfer"
          RESPONSE=$(curl -s -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d "{\"receiverId\": \"${USER_ACCOUNT_ID}\", \"amount\": \"1000000\", \"memo\": \"CI integration test\"}" || echo "connection_error")

          echo "API Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q '"message"' && echo "$RESPONSE" | grep -q "FT transfer"; then
            echo "✅ Single FT transfer test passed!"
          else
            echo "❌ Single FT transfer test failed"
            echo "Response: $RESPONSE"
            kill $SERVICE_PID 2>/dev/null || true
            exit 1
          fi

          # Test 2: Batch transfers
          echo "Test 2: Batch FT transfers"
          BATCH_DATA="{\"transfers\": [
            {\"receiverId\": \"${USER_ACCOUNT_ID}\", \"amount\": \"500000\", \"memo\": \"Batch test 1\"},
            {\"receiverId\": \"${USER_ACCOUNT_ID}\", \"amount\": \"750000\", \"memo\": \"Batch test 2\"}
          ]}"

          RESPONSE=$(curl -s -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d "$BATCH_DATA" || echo "connection_error")

          echo "Batch API Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q '"message"' && echo "$RESPONSE" | grep -q "FT transfers"; then
            echo "✅ Batch FT transfer test passed!"
          else
            echo "❌ Batch FT transfer test failed"
            echo "Response: $RESPONSE"
            kill $SERVICE_PID 2>/dev/null || true
            exit 1
          fi

          # Test 3: Invalid receiver ID (security test)
          echo "Test 3: Security test - Invalid receiver ID"
          RESPONSE=$(curl -s -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d "{\"receiverId\": \"invalid..account\", \"amount\": \"1000000\"}" || echo "connection_error")

          if echo "$RESPONSE" | grep -q '"error"' && echo "$RESPONSE" | grep -q "Invalid receiverId"; then
            echo "✅ Security test passed - invalid receiver rejected!"
          else
            echo "❌ Security test failed - invalid receiver should be rejected"
            echo "Response: $RESPONSE"
            kill $SERVICE_PID 2>/dev/null || true
            exit 1
          fi

          echo "🎯 Running Artillery load test..."
          RECEIVER_ID="${USER_ACCOUNT_ID}" npx artillery run benchmark.yml --output benchmark-sandbox.json || echo "⚠️ Artillery test completed with warnings"

          # Cleanup
          kill $SERVICE_PID 2>/dev/null || true
          echo "✅ All integration tests passed!"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-logs
          path: |
            neard.log
            service.log
            benchmark-sandbox.json