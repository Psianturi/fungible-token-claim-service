name: Sandbox Integration (CI)

on:
  push:
  pull_request:

jobs:
  sandbox-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install deps (ci or install fallback)
        run: |
          if [ -f package-lock.json ]; then npm ci --silent; else npm install --silent; fi

      - name: Try to install neard binary from nearcore releases
        id: install_neard
        run: |
          set -euo pipefail
          VERSION="2.6.5"   # sesuaikan versi yang kamu pakai
          TRIES=( "neard-${VERSION}-x86_64-unknown-linux-gnu.tar.gz" "neard-v${VERSION}-x86_64-unknown-linux-gnu.tar.gz" )
          OK=0
          for name in "${TRIES[@]}"; do
            URL="https://github.com/near/nearcore/releases/download/${VERSION}/${name}"
            echo "Trying $URL ..."
            if curl -sSL --fail -o /tmp/neard.tar.gz "$URL"; then
              mkdir -p /tmp/neard_unpack
              tar -xzf /tmp/neard.tar.gz -C /tmp/neard_unpack
              if [ -f /tmp/neard_unpack/neard ]; then
                sudo mv /tmp/neard_unpack/neard /usr/local/bin/neard
                OK=1
                break
              fi
              # try nested location
              found=$(find /tmp/neard_unpack -type f -name neard | head -n1 || true)
              if [ -n "$found" ]; then
                sudo mv "$found" /usr/local/bin/neard
                OK=1
                break
              fi
            fi
          done
          if [ "$OK" -eq 1 ]; then
            sudo chmod +x /usr/local/bin/neard
            echo "neard installed"
            echo "installed=true" >> $GITHUB_OUTPUT
          else
            echo "neard not installed"
            echo "installed=false" >> $GITHUB_OUTPUT
          fi

      - name: Start neard sandbox (if installed)
        if: steps.install_neard.outputs.installed == 'true'
        run: |
          set -euo pipefail
          export NEAR_HOME="$HOME/.near"
          mkdir -p "$NEAR_HOME"
          # init if needed (non-fatal)
          neard --home "$NEAR_HOME" init --chain-id sandbox || true
          nohup neard --home "$NEAR_HOME" run > neard.log 2>&1 &
          # wait for jsonrpc
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "sandbox ready"
              break
            fi
            sleep 1
          done
          curl -sS http://127.0.0.1:3030/status || (echo "neard didn't start" && cat neard.log && exit 1)

      - name: Deploy FT contract to sandbox
        if: steps.install_neard.outputs.installed == 'true'
        run: |
          set -euo pipefail
          export NEAR_HOME="$HOME/.near"
          export NEAR_ENV=sandbox
          export NEAR_CLI_LOCALNET_RPC_SERVER_URL=http://127.0.0.1:3030

          # Create FT contract account
          echo "Creating FT contract account..."
          neard --home "$NEAR_HOME" create-account ft.test.near --master-account test.near --initial-balance 1000 || true

          # Deploy FT contract
          echo "Deploying FT contract..."
          neard --home "$NEAR_HOME" deploy --account-id ft.test.near --wasm-file fungible_token.wasm --init-function new --init-args '{"owner_id": "test.near", "total_supply": "1000000000000000000000000", "metadata": {"spec": "ft-1.0.0", "name": "Test Token", "symbol": "TEST", "decimals": 18}}'

          # Create user account for testing
          echo "Creating user account..."
          neard --home "$NEAR_HOME" create-account user.test.near --master-account test.near --initial-balance 1000 || true

          # Register storage for accounts
          echo "Registering storage for test.near..."
          neard --home "$NEAR_HOME" call ft.test.near storage_deposit '{"account_id": "test.near"}' --account-id test.near --amount 0.00125 || true

          echo "Registering storage for user.test.near..."
          neard --home "$NEAR_HOME" call ft.test.near storage_deposit '{"account_id": "user.test.near"}' --account-id user.test.near --amount 0.00125 || true

          # Mint some tokens to test.near for testing
          echo "Minting tokens to test.near..."
          neard --home "$NEAR_HOME" call ft.test.near mint '{"account_id": "test.near", "amount": "1000000000000000000000000"}' --account-id test.near || true

          echo "FT contract deployment completed"

      - name: Fallback to run tests against testnet (if no sandbox)
        if: steps.install_neard.outputs.installed == 'false'
        run: |
          echo "neard not available in runner. We'll run integration steps against testnet as fallback."
          # set env so app uses testnet config
          echo "NEAR_ENV=testnet" >> $GITHUB_ENV

      - name: Run server (in background) and tests
        run: |
          # start service (server uses NEAR_ENV from env or .env)
          NEAR_ENV=${NEAR_ENV:-sandbox} npm run start:sandbox &> service.log &
          sleep 2
          # Wait for API to respond (up to 60s)
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "service up"; break
            fi
            sleep 1
          done

          # Run integration tests with retry
          echo "Running integration tests..."
          for attempt in {1..3}; do
            echo "Test attempt $attempt/3"

            # Test FT transfer
            RESPONSE=$(curl -s -X POST http://127.0.0.1:3000/send-ft \
              -H "Content-Type: application/json" \
              -d '{"receiverId": "user.test.near", "amount": "1000000000000000000", "memo": "CI test"}' || echo "connection_error")

            echo "API Response: $RESPONSE"

            # Check if transfer was successful
            if echo "$RESPONSE" | grep -q '"message"' && echo "$RESPONSE" | grep -q "FT transfer"; then
              echo "‚úÖ FT transfer test passed!"
              break
            else
              echo "‚ùå FT transfer test failed (attempt $attempt)"
              if [ $attempt -eq 3 ]; then
                echo "Final response: $RESPONSE"
                exit 1
              fi
              sleep 5
            fi
          done

          # Run Artillery benchmark
          echo "üéØ Running Artillery benchmark..."
          npx artillery run benchmark.yml --output benchmark-sandbox.json || true
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-logs
          path: |
            neard.log
            service.log
            benchmark-sandbox.json