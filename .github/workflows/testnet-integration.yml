# .github/workflows/testnet-integration.yml
name: Testnet Integration (CI)

on:
  push:
  pull_request:

jobs:
  testnet-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (respect updated package.json)
        run: |
          npm install --silent

      - name: Configure testnet environment
        run: |
          set -euo pipefail
          echo "� Configuring testnet environment..."

          # Use testnet account for CI testing
          # Note: This account should have minimal funds for testing
          echo "NEAR_ENV=testnet" >> $GITHUB_ENV
          echo "NODE_URL=https://rpc.testnet.near.org" >> $GITHUB_ENV
          echo "RPC_URLS=https://rpc.testnet.near.org,https://rpc.testnet.fastnear.com/?apiKey=demo" >> $GITHUB_ENV

          # Test account (should be configured with minimal NEAR for gas)
          # Replace with actual testnet account that has FT contract deployed
          echo "FT_CONTRACT=your-ft-contract.testnet" >> $GITHUB_ENV
          echo "MASTER_ACCOUNT=your-test-account.testnet" >> $GITHUB_ENV
          echo "MASTER_ACCOUNT_PRIVATE_KEY=ed25519:your-private-key-here" >> $GITHUB_ENV

          echo "✅ Testnet environment configured"

      - name: Run API service and integration tests
        run: |
          set -euo pipefail
          echo "🚀 Starting API service for testnet integration testing..."

          # Start the API service in background
          NEAR_ENV=testnet \
          NODE_URL="${NODE_URL}" \
          RPC_URLS="${RPC_URLS}" \
          FT_CONTRACT="${FT_CONTRACT}" \
          MASTER_ACCOUNT="${MASTER_ACCOUNT}" \
          MASTER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}" \
          npm run start:testnet &> service.log &
          SERVICE_PID=$!

          cleanup() {
            kill $SERVICE_PID 2>/dev/null || true
          }
          trap cleanup EXIT

          # Wait for service to be ready
          echo "⏳ Waiting for API service to start..."
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "✅ API service is responding"
              break
            fi
            echo "⏳ Waiting for service... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "❌ API service did not start within 1 minute"
            cat service.log
            kill $SERVICE_PID 2>/dev/null || true
            exit 1
          fi

          echo "🧪 Running send-ft API validation test..."
          echo "⚠️ Note: Using testnet - this will perform real blockchain transactions"

          # Use a test receiver that exists on testnet
          TEST_RECEIVER="test.near"  # Using test.near as it's a known account

          RESPONSE_CODE=$(curl -sS -o response.json -w "%{http_code}" \
            -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d "{\"receiverId\": \"${TEST_RECEIVER}\", \"amount\": \"1000000\", \"memo\": \"CI testnet integration test\"}")
          cat response.json

          # On testnet, we expect either success (200) or controlled failure
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "✅ API service processed testnet transaction successfully"
            TRANSACTION_HASH=$(jq -r '.transactionHash // empty' response.json)
            if [ -n "$TRANSACTION_HASH" ]; then
              echo "📋 Transaction Hash: $TRANSACTION_HASH"
              echo "🔗 View on explorer: https://testnet.nearblocks.io/txns/$TRANSACTION_HASH"
            fi
          elif [ "$RESPONSE_CODE" -eq 500 ] && jq -e '.error | test("insufficient") or test("balance") or test("storage")' response.json >/dev/null; then
            echo "✅ API service responded correctly with expected testnet error (insufficient balance/storage)"
          else
            echo "❌ Unexpected response: HTTP $RESPONSE_CODE"
            echo "Response body:"
            cat response.json
            exit 1
          fi

          echo "✅ send-ft API testnet validation test passed"

          echo "🔁 Running negative validation checks..."
          INVALID_CODE=$(curl -sS -o invalid.json -w "%{http_code}" \
            -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d '{"receiverId":"invalid..account","amount":"1000000"}')
          cat invalid.json
          if [ "$INVALID_CODE" -ne 400 ]; then
            echo "❌ Expected HTTP 400 for invalid receiver"
            exit 1
          fi
          if ! jq -e '.error | test("Invalid receiverId")' invalid.json >/dev/null; then
            echo "❌ Invalid receiver validation message missing"
            exit 1
          fi

          MISSING_CODE=$(curl -sS -o missing.json -w "%{http_code}" \
            -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d '{"amount":"1000000"}')
          cat missing.json
          if [ "$MISSING_CODE" -ne 400 ]; then
            echo "❌ Expected HTTP 400 for missing receiver"
            exit 1
          fi
          if ! jq -e '.error | test("receiverId")' missing.json >/dev/null; then
            echo "❌ Missing field validation message missing"
            exit 1
          fi

          echo "✅ Negative validation checks passed"

          echo "🎯 Skipping Artillery load test (not required for CI)"
          echo "✅ All testnet integration tests passed!"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: testnet-integration-logs
          path: |
            service.log
            response.json
            invalid.json
            missing.json