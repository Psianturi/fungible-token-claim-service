# .github/workflows/sandbox-test.yml
name: Sandbox Integration (CI)

on:
  push:
  pull_request:

jobs:
  sandbox-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (respect updated package.json)
        run: |
          npm install --silent

      - name: Start NEAR sandbox
        run: |
          set -euo pipefail
          echo "🚀 Starting NEAR sandbox..."

          # Kill any existing sandbox processes
          pkill -f near-sandbox || true
          sleep 2

          # Clean up any leftover processes
          pkill -f neard || true
          sleep 1

          npx near-sandbox init || true
          nohup npx near-sandbox run > neard.log 2>&1 &
          SANDBOX_PID=$!

          # wait for jsonrpc
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "✅ NEAR sandbox ready"
              break
            fi
            echo "⏳ Waiting for sandbox... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "❌ Sandbox failed to start within 60 seconds"
            cat neard.log
            kill $SANDBOX_PID 2>/dev/null || true
            exit 1
          fi

          curl -sS http://127.0.0.1:3030/status || (echo "near-sandbox didn't start properly" && cat neard.log && kill $SANDBOX_PID 2>/dev/null || true && exit 1)

      - name: Extract sandbox validator key
        run: |
          set -euo pipefail
          echo "🔑 Extracting validator private key..."
          VALIDATOR_KEY_FILE="${HOME}/.near/validator_key.json"
          if [ -f "$VALIDATOR_KEY_FILE" ]; then
            SECRET_KEY=$(jq -r '.secret_key // .private_key' "$VALIDATOR_KEY_FILE")
            ACCOUNT_ID=$(jq -r '.account_id' "$VALIDATOR_KEY_FILE")
            echo "Found account: $ACCOUNT_ID"
            echo "Using key: ${SECRET_KEY:0:10}..."
            echo "MASTER_ACCOUNT_PRIVATE_KEY=$SECRET_KEY" >> $GITHUB_ENV
            echo "MASTER_ACCOUNT=$ACCOUNT_ID" >> $GITHUB_ENV
            echo "FT_CONTRACT=$ACCOUNT_ID" >> $GITHUB_ENV
          else
            echo "❌ validator_key.json not found"
            exit 1
          fi
      - name: Deploy FT contract to sandbox
        run: |
          set -euo pipefail
          echo "� Deploying FT contract to sandbox..."
          export NEAR_CONTRACT_ACCOUNT_ID="${FT_CONTRACT}"
          export NEAR_SIGNER_ACCOUNT_ID="${MASTER_ACCOUNT}"
          export NEAR_SIGNER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}"
          export NEAR_NETWORK_CONNECTION=sandbox
          export NEAR_NODE_URL=http://127.0.0.1:3030
          node ci/deploy-sandbox-rpc.mjs
          echo "✅ FT contract ready at ${NEAR_CONTRACT_ACCOUNT_ID}"

      - name: Create test accounts for API testing
        run: |
          set -euo pipefail
          echo "👥 Creating test accounts for API testing..."

          export NEAR_CONTRACT_ACCOUNT_ID="${FT_CONTRACT}"
          export NEAR_SIGNER_ACCOUNT_ID="${MASTER_ACCOUNT}"
          export NEAR_SIGNER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}"
          export NEAR_NETWORK_CONNECTION=sandbox
          export NEAR_NODE_URL=http://127.0.0.1:3030

          OUTPUT=$(node ci/setup-test-accounts.mjs)
          echo "$OUTPUT"
          USER_ACCOUNT_ID=$(echo "$OUTPUT" | grep 'USER_ACCOUNT_ID=' | tail -n1 | cut -d'=' -f2)
          if [ -z "$USER_ACCOUNT_ID" ]; then
            echo "❌ Failed to capture USER_ACCOUNT_ID from setup output"
            exit 1
          fi
          echo "USER_ACCOUNT_ID=$USER_ACCOUNT_ID" >> $GITHUB_ENV
          echo "✅ Test accounts setup complete - User account: $USER_ACCOUNT_ID"

      - name: Show NEAR environment summary
        run: |
          set -euo pipefail
          echo "MASTER_ACCOUNT=${MASTER_ACCOUNT}"
          echo "FT_CONTRACT=${FT_CONTRACT}"
          echo "USER_ACCOUNT_ID=${USER_ACCOUNT_ID}"

      - name: Run API service and integration tests
        run: |
          set -euo pipefail
          echo "🚀 Starting API service for integration testing..."

          # Start the API service in background
          NEAR_ENV=sandbox \
          NODE_URL=http://127.0.0.1:3030 \
          FT_CONTRACT="${FT_CONTRACT}" \
          MASTER_ACCOUNT="${MASTER_ACCOUNT}" \
          MASTER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}" \
          npm run start:sandbox &> service.log &
          SERVICE_PID=$!

          cleanup() {
            kill $SERVICE_PID 2>/dev/null || true
          }
          trap cleanup EXIT

          # Wait for service to be ready
          echo "⏳ Waiting for API service to start..."
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "✅ API service is responding"
              break
            fi
            echo "⏳ Waiting for service... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "❌ API service did not start within 1 minute"
            cat service.log
            kill $SERVICE_PID 2>/dev/null || true
            exit 1
          fi

          echo "🧪 Running send-ft integration test..."
          RESPONSE_CODE=$(curl -sS -o response.json -w "%{http_code}" \
            -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d "{\"receiverId\": \"${USER_ACCOUNT_ID}\", \"amount\": \"1000000\", \"memo\": \"CI integration test\"}")
          cat response.json

          if [ "$RESPONSE_CODE" -ne 200 ]; then
            echo "❌ send-ft request failed with HTTP $RESPONSE_CODE"
            exit 1
          fi

          if ! jq -e '.message | test("initiated successfully")' response.json >/dev/null; then
            echo "❌ Unexpected response payload"
            exit 1
          fi

          echo "✅ send-ft request succeeded"

          echo "🔍 Verifying receiver token balance..."
          NEAR_NODE_URL=http://127.0.0.1:3030 \
          NEAR_CONTRACT_ACCOUNT_ID="${FT_CONTRACT}" \
          NEAR_SIGNER_ACCOUNT_ID="${MASTER_ACCOUNT}" \
          NEAR_SIGNER_ACCOUNT_PRIVATE_KEY="${MASTER_ACCOUNT_PRIVATE_KEY}" \
          RECEIVER_ACCOUNT_ID="${USER_ACCOUNT_ID}" \
          node ci/assert-receiver-balance.mjs
          echo "✅ Receiver token balance verified"

          echo "🔁 Running negative validation checks..."
          INVALID_CODE=$(curl -sS -o invalid.json -w "%{http_code}" \
            -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d '{"receiverId":"invalid..account","amount":"1000000"}')
          cat invalid.json
          if [ "$INVALID_CODE" -ne 400 ]; then
            echo "❌ Expected HTTP 400 for invalid receiver"
            exit 1
          fi
          if ! jq -e '.error | test("Invalid receiverId")' invalid.json >/dev/null; then
            echo "❌ Invalid receiver validation message missing"
            exit 1
          fi

          MISSING_CODE=$(curl -sS -o missing.json -w "%{http_code}" \
            -X POST http://127.0.0.1:3000/send-ft \
            -H "Content-Type: application/json" \
            -d '{"amount":"1000000"}')
          cat missing.json
          if [ "$MISSING_CODE" -ne 400 ]; then
            echo "❌ Expected HTTP 400 for missing receiver"
            exit 1
          fi
          if ! jq -e '.error | test("receiverId")' missing.json >/dev/null; then
            echo "❌ Missing field validation message missing"
            exit 1
          fi

          echo "✅ Negative validation checks passed"

          echo "🎯 Skipping Artillery load test (not required for CI)"
          echo "✅ All integration tests passed!"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-logs
          path: |
            neard.log
            service.log
            benchmark-sandbox.json