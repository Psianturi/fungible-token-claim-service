# .github/workflows/sandbox-test.yml
name: Sandbox Integration (CI)

on:
  push:
  pull_request:

jobs:
  sandbox-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies (respect updated package.json)
        run: |
          npm install --silent

      - name: Try to install neard binary from nearcore releases
        id: install_neard
        run: |
          set -euo pipefail
          echo "Skipping neard install; using near-sandbox CLI fallback"
          echo "installed=false" >> $GITHUB_OUTPUT

      - name: Start neard sandbox (if installed)
        if: steps.install_neard.outputs.installed == 'true'
        run: |
          set -euo pipefail
          export NEAR_HOME="$HOME/.near"
          mkdir -p "$NEAR_HOME"
          # init if needed (non-fatal)
          neard --home "$NEAR_HOME" init --chain-id sandbox || true
          nohup neard --home "$NEAR_HOME" run > neard.log 2>&1 &
          # wait for jsonrpc
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "sandbox ready"
              break
            fi
            sleep 1
          done
          curl -sS http://127.0.0.1:3030/status || (echo "neard didn't start" && cat neard.log && exit 1)

      - name: Wait for NEAR Sandbox to be ready
        if: steps.install_neard.outputs.installed == 'true'
        run: |
          set -euo pipefail
          echo "⏳ Waiting for NEAR Sandbox to be fully ready..."

          # Wait for sandbox RPC to respond
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "✅ Sandbox RPC is responding"
              break
            fi
            echo "⏳ Waiting for sandbox RPC... ($i/60)"
            sleep 2
          done

          if [ $i -eq 60 ]; then
            echo "❌ Sandbox RPC did not respond within 2 minutes"
            exit 1
          fi

      - name: Start NEAR sandbox via near-sandbox (npm fallback)
        if: steps.install_neard.outputs.installed == 'false'
        run: |
          set -euo pipefail
          echo "Starting near-sandbox fallback (init + run)..."
          npx near-sandbox init || true
          nohup npx near-sandbox run > neard.log 2>&1 &
          # wait for jsonrpc
          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              echo "✅ near-sandbox fallback ready"
              break
            fi
            sleep 1
          done
          curl -sS http://127.0.0.1:3030/status || (echo "near-sandbox fallback didn't start" && cat neard.log && exit 1)

      - name: Extract sandbox validator key
        if: steps.install_neard.outputs.installed == 'false'
        run: |
          set -euo pipefail
          echo "Extracting validator private key from near-sandbox..."
          VALIDATOR_KEY_FILE="${HOME}/.near/validator_key.json"
          if [ -f "$VALIDATOR_KEY_FILE" ]; then
            SECRET_KEY=$(jq -r '.secret_key // .private_key' "$VALIDATOR_KEY_FILE")
            ACCOUNT_ID=$(jq -r '.account_id' "$VALIDATOR_KEY_FILE")
            echo "Found account: $ACCOUNT_ID"
            echo "Using key: ${SECRET_KEY:0:10}..."
            echo "MASTER_ACCOUNT_PRIVATE_KEY=$SECRET_KEY" >> $GITHUB_ENV
          else
            echo "❌ validator_key.json not found"
            exit 1
          fi
      - name: Deploy FT contract to sandbox via RPC (near-api-js)
        if: steps.install_neard.outputs.installed == 'true'
        env:
          NODE_URL: http://127.0.0.1:3030
          MASTER_ACCOUNT: test.near
          FT_CONTRACT: test.near
          RECEIVER_ID: test.near
        run: |
          set -euo pipefail
          echo "🚀 Deploying FT contract to sandbox RPC..."
          echo "PWD: $(pwd)"
          echo "Workspace listing:"
          ls -la
          echo "ci/ listing:"
          ls -la ci
          echo "HOME: ${HOME}"
          echo "Listing ${HOME}/.near (if exists):"
          ls -la "${HOME}/.near" || true
          echo "Attempt to print validator_key.json locations (if any):"
          for p in "${HOME}/.near/validator_key.json" "${HOME}/.near/data/validator_key.json" "${HOME}/.near/node/validator_key.json" "${HOME}/.near/node0/validator_key.json" "${HOME}/.near/sandbox/validator_key.json"; do
            if [ -f "$p" ]; then
              echo "Found: $p"
              head -n 5 "$p" || true
            fi
          done

          echo "🔎 Checking sandbox RPC status before deploy..."
          READY=0
          for i in $(seq 1 30); do
            if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
              READY=1
              break
            fi
            sleep 1
          done

          if [ "$READY" -ne 1 ]; then
            echo "⚠️ Sandbox RPC not responding, attempting near-sandbox fallback start (init + run)..."
            npx near-sandbox init || true
            nohup npx near-sandbox run > neard.log 2>&1 &
            for i in $(seq 1 60); do
              if curl -sS http://127.0.0.1:3030/status >/dev/null 2>&1; then
                READY=1
                break
              fi
              sleep 1
            done
          fi

          if [ "$READY" -ne 1 ]; then
            echo "❌ Sandbox RPC still not responding, showing neard.log (if any) and failing"
            [ -f neard.log ] && tail -n +1 neard.log || echo "neard.log not found"
            exit 1
          fi

          node ci/deploy-sandbox-rpc.mjs
          echo "✅ Contract deployment completed"

      - name: Install near-cli-rs
        if: steps.install_neard.outputs.installed == 'false'
        run: |
          set -euo pipefail
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/near-cli-rs/releases/latest/download/near-cli-rs-installer.sh | sh
          near --version

      - name: Prepare near-cli-rs env (sandbox)
        if: steps.install_neard.outputs.installed == 'false'
        env:
          NODE_URL: http://127.0.0.1:3030
          MASTER_ACCOUNT: test.near
          FT_CONTRACT: test.near
        run: |
          set -euo pipefail
          VALIDATOR_KEY_FILE="${HOME}/.near/validator_key.json"
          if [ ! -f "$VALIDATOR_KEY_FILE" ]; then
            echo "❌ validator_key.json not found"
            exit 1
          fi
          PUB=$(jq -r '.public_key' "$VALIDATOR_KEY_FILE")
          PRIV=$(jq -r '.secret_key // .private_key' "$VALIDATOR_KEY_FILE")
          echo "NEAR_NETWORK_CONNECTION=sandbox" >> $GITHUB_ENV
          echo "NEAR_CONTRACT_ACCOUNT_ID=${FT_CONTRACT}" >> $GITHUB_ENV
          echo "NEAR_SIGNER_ACCOUNT_ID=${MASTER_ACCOUNT}" >> $GITHUB_ENV
          echo "NEAR_SIGNER_ACCOUNT_PUBLIC_KEY=${PUB}" >> $GITHUB_ENV
          echo "NEAR_SIGNER_ACCOUNT_PRIVATE_KEY=${PRIV}" >> $GITHUB_ENV
          # Add custom network config for sandbox
          mkdir -p "${HOME}/.config/near-cli"
          printf "version = \"1\"\ncredentials_home_dir = \"/home/runner/.near-credentials\"\n\n[network_connection.sandbox]\nnetwork_name = \"sandbox\"\nrpc_url = \"%s\"\nwallet_url = \"https://wallet.testnet.near.org\"\nexplorer_transaction_url = \"https://explorer.testnet.near.org/transactions\"\n" "${NODE_URL}" > "${HOME}/.config/near-cli/config.toml"
          echo "near-cli-rs config:"
          cat "${HOME}/.config/near-cli/config.toml" || true

      - name: Check FT contract status
        if: steps.install_neard.outputs.installed == 'false'
        env:
          NEAR_NETWORK_CONNECTION: sandbox
          NEAR_CONTRACT_ACCOUNT_ID: test.near
          NEAR_SIGNER_ACCOUNT_ID: test.near
        run: |
          set -euo pipefail
          echo "🔍 Checking FT contract status..."
          if near contract call-function as-read "$NEAR_CONTRACT_ACCOUNT_ID" ft_total_supply json-args '{}' \
            --network-config "$NEAR_NETWORK_CONNECTION" >/dev/null 2>&1; then
            echo "✅ FT contract exists and is functional"
            echo "CONTRACT_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ FT contract not found - will deploy now"
            echo "CONTRACT_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Deploy FT contract via near-cli-rs
        if: steps.install_neard.outputs.installed == 'false' && env.CONTRACT_EXISTS == 'false'
        env:
          NEAR_NETWORK_CONNECTION: sandbox
          NEAR_CONTRACT_ACCOUNT_ID: test.near
          NEAR_SIGNER_ACCOUNT_ID: test.near
        run: |
          set -euo pipefail
          echo "🚀 Deploying FT contract via near-cli-rs..."
          echo "Checking for fungible_token.wasm file..."
          ls -la fungible_token.wasm

          # Use Node.js deploy script instead of near-cli-rs
          echo "Using Node.js deploy script..."
          node ci/deploy-sandbox-rpc.mjs

          echo "✅ FT contract deployed and initialized"


      - name: storage_deposit for test.near via near-cli-rs
        if: steps.install_neard.outputs.installed == 'false'
        env:
          NEAR_NETWORK_CONNECTION: sandbox
          NEAR_CONTRACT_ACCOUNT_ID: test.near
          NEAR_SIGNER_ACCOUNT_ID: test.near
        run: |
          set -euo pipefail
          ARGS='{"account_id":"test.near","registration_only":true}'
          echo "🧾 Registering storage for test.near"
          near contract call-function as-transaction "$NEAR_CONTRACT_ACCOUNT_ID" storage_deposit json-args "$ARGS" \
            prepaid-gas '300000000000000' \
            attached-deposit '1250000000000000000000' \
            --signer "$NEAR_SIGNER_ACCOUNT_ID" \
            --network-config "$NEAR_NETWORK_CONNECTION" \
            --signer-public-key "$NEAR_SIGNER_ACCOUNT_PUBLIC_KEY" \
            --signer-private-key "$NEAR_SIGNER_ACCOUNT_PRIVATE_KEY" || echo "storage_deposit may already exist"
          echo "✅ storage_deposit completed (or already exists)"

      - name: Run server (in background) and tests (sandbox)
        if: steps.install_neard.outputs.installed == 'true'
        env:
          NEAR_ENV: sandbox
          NODE_URL: http://127.0.0.1:3030
          FT_CONTRACT: test.near
          MASTER_ACCOUNT: test.near
        run: |
          npm run start:sandbox &> service.log &
          sleep 3

          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "✅ service up and responding"
              break
            fi
            echo "⏳ Waiting for service... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "❌ Service did not start within 1 minute"
            cat service.log
            exit 1
          fi

          echo "🧪 Running integration tests..."
          RECEIVER_ID="test.near"

          for attempt in {1..3}; do
            echo "Test attempt $attempt/3"
            RESPONSE=$(curl -s -X POST http://127.0.0.1:3000/send-ft \
              -H "Content-Type: application/json" \
              -d "{\"receiverId\": \"${RECEIVER_ID}\", \"amount\": \"1000000\", \"memo\": \"CI test\"}" || echo "connection_error")
            echo "API Response: $RESPONSE"
            if echo "$RESPONSE" | grep -q '"message"' && echo "$RESPONSE" | grep -q "FT transfer"; then
              echo "✅ FT transfer test passed!"
              break
            else
              echo "❌ FT transfer test failed (attempt $attempt)"
              if [ $attempt -eq 3 ]; then
                echo "Final response: $RESPONSE"
                exit 1
              fi
              sleep 5
            fi
          done

          echo "🎯 Running Artillery benchmark..."
          npx artillery run benchmark.yml --output benchmark-sandbox.json || true

      - name: Run server (in background) and tests (fallback)
        if: steps.install_neard.outputs.installed == 'false'
        env:
          NEAR_ENV: sandbox
          NODE_URL: http://127.0.0.1:3030
          FT_CONTRACT: test.near
          MASTER_ACCOUNT: test.near
        run: |
          npm run start:sandbox &> service.log &
          sleep 3

          for i in $(seq 1 60); do
            if curl -sS http://127.0.0.1:3000/health >/dev/null 2>&1; then
              echo "✅ service up and responding"
              break
            fi
            echo "⏳ Waiting for service... ($i/60)"
            sleep 1
          done

          if [ $i -eq 60 ]; then
            echo "❌ Service did not start within 1 minute"
            cat service.log
            exit 1
          fi

          echo "🧪 Running integration tests..."
          RECEIVER_ID="test.near"

          for attempt in {1..3}; do
            echo "Test attempt $attempt/3"
            RESPONSE=$(curl -s -X POST http://127.0.0.1:3000/send-ft \
              -H "Content-Type: application/json" \
              -d "{\"receiverId\": \"${RECEIVER_ID}\", \"amount\": \"1000000\", \"memo\": \"CI test\"}" || echo "connection_error")
            echo "API Response: $RESPONSE"
            if echo "$RESPONSE" | grep -q '"message"' && echo "$RESPONSE" | grep -q "FT transfer"; then
              echo "✅ FT transfer test passed!"
              break
            else
              echo "❌ FT transfer test failed (attempt $attempt)"
              if [ $attempt -eq 3 ]; then
                echo "Final response: $RESPONSE"
                exit 1
              fi
              sleep 5
            fi
          done

          echo "🎯 Running Artillery benchmark..."
          npx artillery run benchmark.yml --output benchmark-sandbox.json || true

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-logs
          path: |
            neard.log
            service.log
            benchmark-sandbox.json